#!/bin/sh
# $Revision$
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# * Neither the name of the Nth Dimension nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# (c) Tim Brown, 2014
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

if [ -z "${fileincluded}" ]
then

fileincluded=1

. lib/misc/validate

file_check_or_generate_cache() {
	if [ "$(file_is_regular "$(basename "${FILENAME}").files_cache.$$")" -ne 1 ]
	then
		stdio_message_log "file" "Generating file cache..."
		# the below looks a bit odd but it's the best way to normalise file's output since we're not interested in inodes, device major/minor numbers etc
		find "$(dirname "${FILENAME}")/.." -ls | while read _ _ permissions _ userid groupid _ _ _ _ filename restofline
		do
			printf "%s %s %s %s" "${permissions}" "${userid}" "${groupid}" "${filename}"
			if [ -n "${restofline}" ]
			then
				printf " %s" "${restofline}"
			fi
			printf "\n"
		done >"$(basename "${FILENAME}").files_cache.$$"
		if [ "$(file_is_directory "${DIRECTORYPATH}")" -eq 1 ]
		then
			find "${DIRECTORYPATH}" -ls | while read _ _ permissions _ userid groupid _ _ _ _ filename restofline
			do
				printf "%s %s %s %s" "${permissions}" "${userid}" "${groupid}" "${filename}"
				if [ -n "${restofline}" ]
				then
					printf " %s" "${restofline}"
				fi
				printf "\n"
			done >>"$(basename "${FILENAME}").files_cache.$$"
		fi
		stdio_message_log "file" "Cache generated..."
	fi
}

file_list_by_filename() {
	# patterns must always take the form "/path/*/find" i.e. regular expressions
	pattern="${1}"
	[ "$(validate_is_string "${pattern}")" ] || false
	# this will only work for files, not dirs - mostly what we want I think
	egrep -- "^-.* ${pattern}" "$(basename "${FILENAME}").files_cache.$$" | while read permissions userid groupid filename
	do
		# TODO what if pattern matches on symlink? we may still revert to glob() style checking
		printf "%s\n" "${filename}"
	done
}

file_list_by_perm() {
	# patterns must always take the form "^.......... " i.e. regular expressions. for example "^...s...... |^....S...... " will select setuid binaries 
	pattern="${1}"
	[ "$(validate_is_string "${pattern}")" ] || false
	egrep -- "${pattern}" "$(basename "${FILENAME}").files_cache.$$" | while read permissions userid groupid filename
	do
		printf "%s\n" "${filename}"
	done
}

file_list_by_protection() {
	# patterns must always take the form "x|y" i.e. regular expressions
	pattern="${1}"
	[ "$(validate_is_string "${pattern}")" ] || false
	cat "$(basename "${FILENAME}").files_cache.$$" | while read _ _ _ filename
	do
		file_protection "${filename}" | egrep -- "${pattern}" | while read protection
		do
			printf "%s\n" "${filename}"
		done
	done
}


file_is_regular() {
	filename="${1}"
	[ "$(validate_is_string "${filename}")" ] || false
	if [ -f "${filename}" ]
	then
		printf "1\n"
	else
		printf "0\n"
	fi
}

file_is_directory() {
	filename="${1}"
	[ "$(validate_is_string "${filename}")" ] || false
	if [ -d "${filename}" ]
	then
		printf "1\n"
	else
		printf "0\n"
	fi
}

file_md5sum() {
	filename="${1}"
	[ "$(file_is_regular "${filename}")" ] || false
	md5sum "${filename}" | while read md5sum _
	do
		printf "%s\n" "${md5sum}"
	done
}

file_protection() {
	filename="${1}"
	[ "$(file_is_regular "${filename}")" ] || false
	tools/dump_fileprotection/dump_fileprotection "${filename}" | while read protection
	do
		printf "%s\n" "${protection}"
	done
}

file_check_or_generate_cache

fi
